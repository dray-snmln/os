---
import Header from '../../layouts/Header.astro'
import Footer from '../../layouts/Footer.astro'
import Layout from '../../layouts/Layout.astro'
import Upsell from '../../layouts/offers/upsell.astro'
import data from '../../assets/products.js'

export async function getStaticPaths() {
  const productTypes = data.products
  const pages = []

  for (const productType of Object.keys(productTypes)) {
    const variants = Object.keys(data['products'][productType])

    for (const variant of variants) {
      const { slug, title, onetime, subscription, price, productId, sellingPlan, link, image } =
        data['products'][productType][variant]

      const defaultOnetime = {
        1: {
          discount: 1,
        },
        3: {
          discount: 2,
        },
        6: {
          discount: 3,
        },
      }

      const onetimeQuantities = onetime ? Object.keys(onetime) : Object.keys(defaultOnetime)
      for (const quantity of onetimeQuantities) {
        let onetimeDiscount = onetime ? onetime[quantity] : defaultOnetime[quantity].discount
        pages.push({
          pageSlug: `otp-${slug}-${quantity}`,
          hash: `otp-${slug}-${quantity}`,
          slug,
          variant,
          productType,
          quantity,
          price,
          discount: onetimeDiscount,
          purchaseType: 'onetime',
          productId,
          sellingPlan,
          title,
          link,
          image,
        })
      }

      if (subscription) {
        const subscriptionQuantities = Object.keys(subscription)
        for (const quantity of subscriptionQuantities) {
          const subscriptionData = subscription[quantity]
          const subscriptionDiscount = subscriptionData.discount ? subscriptionData.discount : 0
          pages.push({
            pageSlug: `sub-${slug}-${quantity}`,
            hash: `sub-${slug}-${quantity}`,
            slug,
            variant,
            productType,
            quantity,
            price: subscriptionData.price,
            discount: subscriptionDiscount,
            purchaseType: 'subscription',
            productId,
            sellingPlan: subscriptionData.sellingPlan,
            title,
            link,
            image,
          })
        }
      }
    }
  }

  return pages.map(
    ({
      hash,
      pageSlug,
      slug,
      variant,
      productType,
      title,
      quantity,
      price,
      discount,
      purchaseType,
      image,
      productId,
      sellingPlan,
      link,
      pages,
    }) => {
      const upsell = `u-${pageSlug}`
      return {
        params: { upsell },
        props: {
          hash,
          slug,
          variant,
          productType,
          title,
          quantity,
          price,
          discount,
          purchaseType,
          image,
          productId,
          sellingPlan,
          link,
          pages,
        },
      }
    }
  )
}

const baseUrl = Astro.url.origin

const {
  hash,
  slug,
  productType,
  title,
  variant,
  quantity,
  price,
  discount,
  purchaseType,
  image,
  sellingPlan,
  productId,
} = Astro.props
---

<Layout title={title}>
  <Header />
  <button class="clearbutton size-5">Clear</button>
  <Upsell
    hash={hash}
    slug={slug}
    variant={variant}
    productType={productType}
    title={title}
    quantity={quantity}
    price={price}
    discount={discount}
    purchaseType={purchaseType}
    image={image}
    sellingPlan={sellingPlan}
    productId={productId}
    offerType="upsell"
  />
  <Footer />
</Layout>

<script is:inline define:vars={{ data, baseUrl }}>
  function snakeToKebabCase(str) {
    // Replace underscores (_) with hyphens (-)
    let kebabCaseStr = str.replace(/_/g, '-')
    return kebabCaseStr
  }

  // Clear local storage
  const clearStorage = () => {
    localStorage.removeItem('cart')
    localStorage.removeItem('originalProduct')
    console.log('cart cleared')
  }

  // Get URL Params
  const urlSearchParams = new URLSearchParams(window.location.search)
  const params = Object.fromEntries(urlSearchParams.entries())

  // Iterate through URL Query Parameters
  for (const [key, value] of Object.entries(params)) {
    // Clear local storage when URL has new=true parameter
    if (key === 'new' && value === 'true') {
      console.log('Key "new" has a value of true. Executing code...')
      clearStorage()
    }

    // Store original product's product type in local storage when provided
    if (key === 'ogpr') {
      // Find the product with the matching slug in
      let product = data.products.find((item) => item.slug === value)

      // If the product is found, store its type; otherwise, return null
      if (product) {
        let newJSON = { type: product.slug, quantity: product.quantity, title: product.title }
        localStorage.setItem('originalProduct', JSON.stringify(newJSON))

        console.log(getStored('originalProduct'))
      }
    }
  }

  document.querySelector('.clearbutton').addEventListener('click', () => {
    clearStorage()
  })

  // Get stored object in local storage
  const getStored = (name) => {
    let storedObject = localStorage.getItem(name)
    return storedObject ? JSON.parse(storedObject) : null
  }

  // Get current product information
  const currentProductData = document.querySelector('#product')
  const currentProduct = currentProductData && {
    hash: currentProductData.getAttribute('data-hash'),
    slug: currentProductData.getAttribute('data-slug'),
    variant: currentProductData.getAttribute('data-variant'),
    productType: currentProductData.getAttribute('data-product-type'),
    quantity: currentProductData.getAttribute('data-quantity'),
    sellingPlan: currentProductData.getAttribute('data-selling-plan'),
    productId: currentProductData.getAttribute('data-product-id'),
    offerType: currentProductData.getAttribute('data-offer-type'),
    purchaseType: currentProductData.getAttribute('data-purchase-type'),
    flag: null,
  }

  console.log('Current Product')
  console.log(currentProduct)

  // Get cart
  const getCart = () => {
    let storedJSON = getStored('cart') ? getStored('cart') : []
    let storedObjects = storedJSON.length !== 0 ? storedJSON : []

    return [storedJSON, storedObjects]
  }
  console.log('Current cart')
  console.log(getCart()[0])
  console.log('Total cart orders')
  console.log(getCart()[0].length)

  // Add current product to cart
  if (!getCart()[0].some((obj) => obj.hash === currentProduct.hash)) {
    let updatedProduct = { ...currentProduct }
    let updatedObjects = getCart()[0]
    updatedObjects.push(updatedProduct)
    let updatedJSON = JSON.stringify(updatedObjects)
    localStorage.setItem('cart', updatedJSON)

    console.log('Updated cart')
    console.log(getCart()[0])
  }

  // Display content dynamically based on number of card items
  const dynamicPageContent = () => {
    let acceptOrSkipFlagCount = 1
    for (product of getCart()[0]) {
      if (product.flag == 'accept' || product.flag == 'skip') {
        acceptOrSkipFlagCount++
      }
    }
    const layouts = document.querySelectorAll(`.layout-${acceptOrSkipFlagCount}`)
    for (layout of layouts) {
      layout.classList.remove('hidden')
    }
  }
  dynamicPageContent()

  // Get keys needed to access key:value pair
  const search = (value, obj) => {
    const path = []

    const searchPath = (obj, value) => {
      for (const key in obj) {
        path.push(key) // Add the current key to the path

        if (obj[key] === value) {
          return path // Found the value, return the path
        } else if (typeof obj[key] === 'object' && !Array.isArray(obj[key])) {
          const nestedPath = searchPath(obj[key], value)
          if (nestedPath) {
            return nestedPath
          }
        }
        path.pop() // Remove the current key from the path if the value is not found in this branch
      }
      return null // Value not found in this branch
    }

    return searchPath(obj, value)
  }

  // Check number of flags
  const checkFlags = () => {
    let objects = [...getCart()[1]]
    let flags = {}

    for (let obj of objects) {
      if (obj.offerType === 'upsell' && obj.flag == 'accept') {
        flags.upsellAcceptCount ? flags.upsellAcceptCount++ : (flags.upsellAcceptCount = 1)
        flags.acceptAndSkipCount ? flags.acceptAndSkipCount++ : (flags.acceptAndSkipCount = 1)
      } else if (obj.flag == 'accept' || obj.flag == 'skip') {
        flags.acceptAndSkipCount ? flags.acceptAndSkipCount++ : (flags.acceptAndSkipCount = 1)
      }
    }

    if (flags.upsellAcceptCount >= 2 || flags.acceptAndSkipCount > 2) {
      handleCheckout()
    } else {
      console.log('Continue funnel')
      return false
    }
  }

  // Get next product's quantity
  const getNextProductQuantity = (choice) => {
    const quantities = [1, 3, 6]
    let firstProductQuantity = getCart()[0][0].quantity

    // If upsell button
    if (choice === 'decline') {
      if (currentProduct.quantity < firstProductQuantity) {
        console.log(`use current product quantity ${currentProduct.quantity}`)
        return firstProductQuantity
      } else {
        // Filter numbers less than firstProductQuantity to get next lowest
        let nextLowest = quantities.filter((number) =>
          firstProductQuantity > 1 ? number < firstProductQuantity : number <= 1
        )
        // Get the maximum value from the filtered array
        console.log(`next lowest: ${nextLowest}`)
        return nextLowest[nextLowest.length - 1]
      }
    } else if (choice === 'accept') {
      let nextHighest = quantities.find((number) => number >= firstProductQuantity)
      console.log(`next highest: ${nextHighest}`)
      return nextHighest
    }
  }

  // Get product types that aren't in the cart
  const getCartTypes = () => {
    const cart = getStored('cart')
    const cartTypes = {}

    // Filter out products with types present in the cart
    if (cart) {
      for (item of cart) {
        cartTypes[item.productType] ? cartTypes[item.productType]++ : (cartTypes[item.productType] = 1)
      }

      return Object.keys(cartTypes)
    }

    return 'Cart empty'
  }

  // Filter product types already in the cart and get a product from the remaining product types
  const getNextProduct = (choice) => {
    let cartProductTypes = getCartTypes()
    let nextProduct

    const productListArray = Object.entries(data.products)
    const filteredProductTypeKeys = productListArray.filter((array) => {
      return !array.some((element) => cartProductTypes.includes(element))
    })
    let firstProductTypeKey = filteredProductTypeKeys[0]?.[1] ? filteredProductTypeKeys[0][1] : null

    // Find firstProductKey's object
    let nextProductTypeObject
    if (firstProductTypeKey) {
      nextProductTypeObject = Object.entries(
        Object.entries(data.products).find((arr) => arr.includes(firstProductTypeKey))[1]
      )
    }

    if (!nextProductTypeObject) {
      checkFlags()
      return
    }

    // Get similar flavor to current product if available
    let sameFlavor
    if (nextProductTypeObject) {
      sameFlavor = nextProductTypeObject.find((arr) => arr.includes(currentProduct.variant))

      if (sameFlavor) {
        nextProduct = sameFlavor[1]
      } else if (nextProductTypeObject[0][1]) {
        // Get first product if not
        nextProduct = nextProductTypeObject[0][1]
      } else {
        return null
      }
    }

    return nextProduct
  }

  // Handle link
  const handleLink = (choice) => {
    let linkProductType
    if (choice == 'decline') {
      if (currentProduct.quantity < getCart()[0][0].quantity) {
        linkProductType = 'u'
      } else {
        linkProductType = 'd'
      }
    } else if (choice == 'accept') {
      linkProductType = 'u'
    }

    let nextProduct = choice ? getNextProduct('accept') : getNextProduct('decline')

    let linkOfferType
    if (nextProduct) {
      linkOfferType = nextProduct.subscription ? 'sub' : 'otp'
    } else {
      linkOfferType = currentProduct.purchaseType == 'subscription' ? 'sub' : 'otp'
    }

    let linkSlug
    if (choice == 'decline' && currentProduct.quantity > getNextProductQuantity('decline')) {
      linkSlug = `${currentProduct.slug}`
      linkOfferType = currentProduct.purchaseType == 'subscription' ? 'sub' : 'otp'
    } else {
      if (nextProduct) {
        linkSlug = nextProduct.slug
      } else {
        linkSlug = snakeToKebabCase(currentProduct.slug)
      }
    }

    let linkQuantity
    if (choice == 'accept') {
      linkQuantity = getNextProductQuantity('accept')
    } else {
      linkQuantity = getNextProductQuantity('decline')
    }

    let link =
      baseUrl + '/postpurchase/' + [linkProductType, linkOfferType, linkSlug, linkQuantity].filter((a) => a).join('-')

    console.log(`Link: ${link}`)
    window.location.href = link
  }

  const handleCheckout = () => {
    return alert('end funnel')
  }

  const buttonHandler = (choice) => {
    // Handle flags
    let newFlag
    if (choice == 'accept') {
      newFlag = 'accept'
    } else if (choice == 'decline') {
      // Flag is skip if current product qty is equal to first product's qty && is equal to 1
      if (
        currentProduct.quantity < getCart()[0][0].quantity ||
        (getCart()[0][0].quantity == 1 && currentProduct.quantity == 1)
      ) {
        console.log(`Current product qty: ${currentProduct.quantity}`)
        console.log(`First product in cart qty: ${getCart()[0][0].quantity}`)
        newFlag = 'skip'
      } else {
        newFlag = 'decline'
      }
    }

    let updatedObjects = [...getCart()[0]]
    let updatedProduct = updatedObjects[updatedObjects.length - 1]
    updatedProduct.flag = newFlag
    let updatedJSON = JSON.stringify(updatedObjects)
    localStorage.setItem('cart', updatedJSON)

    checkFlags()

    console.log(`Flag: ${updatedProduct.flag}`)
    console.log(`Link: ${handleLink(choice)}`)
    console.log(`Updated cart:`)
    console.log(getCart()[0])
  }

  // Button setup
  const setupButtons = () => {
    const acceptButtons = document.querySelectorAll('.button.button-accept')
    const declineButtons = document.querySelectorAll('.button.button-decline')

    for (button of acceptButtons) {
      button.addEventListener('click', () => {
        buttonHandler('accept')
      })
    }

    for (button of declineButtons) {
      button.addEventListener('click', () => {
        buttonHandler('decline')
      })
    }
  }
  setupButtons()
</script>
